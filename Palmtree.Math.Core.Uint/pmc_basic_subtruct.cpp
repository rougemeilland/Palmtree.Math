/*
 * The MIT License
 *
 * Copyright 2019 Palmtree Software.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#include "pmc_uint_internal.h"
#include "pmc_basic.h"
#include "pmc_autogenerated_inline_func.h"

namespace Palmtree::Math::Core::Internal
{

    __BORROW_T BasicOperatorEngine::Borrow(__BORROW_T c, _UBASIC_T u_buf)
    {
        __UNIT_TYPE* up = u_buf.BLOCK;
        __UNIT_TYPE u_count = u_buf.BLOCK_COUNT;

        // 桁借りを続く限り行う
        for (;;)
        {
            if (u_count <= 0)
            {
                // u の最上位まで達してしまった場合

                if (c)
                {
                    // かつそれでも桁借りを行う必要がある場合

                    // 減算結果が負になってしまったので呼び出し元に通知する。
                    return (true);
                }

                // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。

                return (false);
            }
            else if (c)
            {
                // u の最上位に達しておらず、かつボローが立っている場合

                // 桁借りを継続する
                c = _SUBTRUCT_UNIT(c, *up, 0, up);
                ++up;
                --u_count;
            }
            else
            {
                // u の最上位に達しておらず、かつボローが立っていない場合

                // 桁借りを中断し復帰する。
                return (false);
            }
        }
    }

    __BORROW_T BasicOperatorEngine::Borrow(__BORROW_T c, _UBASIC_T u_buf, _UBASIC_T w_buf)
    {
        __UNIT_TYPE* up = u_buf.BLOCK;
        __UNIT_TYPE u_count = u_buf.BLOCK_COUNT;
        __UNIT_TYPE* wp = w_buf.BLOCK;
        __UNIT_TYPE w_count = w_buf.BLOCK_COUNT;

        // 桁借りを続く限り行う
        for (;;)
        {
            if (u_count <= 0)
            {
                // x の最上位まで達してしまった場合

                if (c)
                {
                    // かつそれでも桁借りを行う必要がある場合

                    // 減算結果が負になってしまったので呼び出し元に通知する。
                    return (true);
                }

                // xの最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。

                return (false);
            }
            else if (c)
            {
                // xの最上位に達しておらず、かつボローが立っている場合

                // 桁借りを継続する
                c = _SUBTRUCT_UNIT(c, *up++, 0, wp++);
                --u_count;
                --w_count;
            }
            else
            {
                // xの最上位に達しておらず、かつボローが立っていない場合

                // 桁借りを中断し、xの残りのデータをzにそのまま複写し、正常復帰する。
                while (u_count > 0)
                {
                    *wp++ = *up++;
                    --u_count;
                    --w_count;
                }
                return (false);
            }
        }
    }

    static void Subtruct_UX_1W(BasicOperatorEngine& ep, _UBASIC_T u_buf, __UNIT_TYPE v, _UBASIC_T& w_buf)
    {
#ifdef _DEBUG
        if (u_buf.BLOCK_COUNT == 0)
            throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_basic_subtruct.cpp;Subtruct_UX_1W;1");
        if (v == 0)
            throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_basic_subtruct.cpp;Subtruct_UX_1W;1");
#endif
        // 最下桁の減算を行う
        __BORROW_T c = _SUBTRUCT_UNIT(0, u_buf.BLOCK[0], v, &w_buf.BLOCK[0]);

        // 残りの桁の繰上りを行い復帰する。
        if (ep.Borrow(c, u_buf.Region(1), w_buf.Region(1)))
            throw OverflowException(L"減算によりオーバーフローが発生しました。");
    }

    // y_hi は 0 であってはならない。
    static void Subtruct_UX_2W(BasicOperatorEngine& ep, _UBASIC_T u_buf, __UNIT_TYPE v_hi, __UNIT_TYPE v_lo, _UBASIC_T& w_buf)
    {
#ifdef _DEBUG
        if (u_buf.BLOCK_COUNT == 0)
            throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_basic_subtruct.cpp;Subtruct_UX_2W;1");
        if (v_hi == 0)
            throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_basic_subtruct.cpp;Subtruct_UX_2W;1");
#endif
        if (u_buf.BLOCK_COUNT < 2)
        {
            // u が 1 ワードしかなかった場合

            // 明らかに演算結果が負になるのでエラーを通知する。
            throw OverflowException(L"減算によりオーバーフローが発生しました。");
        }
        else
        {
            // x が 2 ワード以上あった場合

            // 最下位のワードの減算をする
            __BORROW_T c = _SUBTRUCT_UNIT(0, u_buf.BLOCK[0], v_lo, &w_buf.BLOCK[0]);

            // 最下位から 2 番目のワードの減算をする。
            c = _SUBTRUCT_UNIT(c, u_buf.BLOCK[1], v_hi, &w_buf.BLOCK[1]);

            // 残りの桁の繰り上がりを計算し、復帰する。
            if (ep.Borrow(c, u_buf.Region(2), w_buf.Region(2)))
                throw OverflowException(L"減算によりオーバーフローが発生しました。");
        }
    }

    // 減算の実装。u のワード数は v のワード数以上でなければならない。また、u と v はどちらも 0 であってはならない。
    static void Subtruct_Imp(BasicOperatorEngine& ep, _UBASIC_T& u_buf, _UBASIC_T v_buf)
    {
        __UNIT_TYPE* up = u_buf.BLOCK;
        __UNIT_TYPE u_count = u_buf.BLOCK_COUNT;
        __UNIT_TYPE* vp = v_buf.BLOCK;
        __UNIT_TYPE v_count = v_buf.BLOCK_COUNT;
        __BORROW_T c = 0;

        // まず 32 ワードずつ減算をする。
        __UNIT_TYPE count = v_count >> 5;
        while (count != 0)
        {
            c = _SUBTRUCT_32WORDS_SBB(c, up, vp, up);
            up += 32;
            vp += 32;
            --count;
        }
        // この時点で未処理の桁は 32 ワード未満のはず

        // 未処理の桁が 16 ワード以上あるなら 16 ワード減算を行う。
        if (v_count & 0x10)
        {
            c = _SUBTRUCT_16WORDS_SBB(c, up, vp, up);
            up += 16;
            vp += 16;
        }
        // この時点で未処理の桁は 16 ワード未満のはず

        // 未処理の桁が 8 ワード以上あるなら 8 ワード減算を行う。
        if (v_count & 0x8)
        {
            c = _SUBTRUCT_8WORDS_SBB(c, up, vp, up);
            up += 8;
            vp += 8;
        }
        // この時点で未処理の桁は 8 ワード未満のはず

        // 未処理の桁が 4 ワード以上あるなら 4 ワード減算を行う。
        if (v_count & 0x4)
        {
            c = _SUBTRUCT_4WORDS_SBB(c, up, vp, up);
            up += 4;
            vp += 4;
        }
        // この時点で未処理の桁は 4 ワード未満のはず

        // 未処理の桁が 2 ワード以上あるなら 2 ワード減算を行う。
        if (v_count & 0x2)
        {
            c = _SUBTRUCT_2WORDS_SBB(c, up, vp, up);
            up += 2;
            vp += 2;
        }
        // この時点で未処理の桁は 2 ワード未満のはず

        // 未処理の桁が 1 ワード以上あるなら 1 ワード減算を行う。
        if (v_count & 1)
        {
            c = _SUBTRUCT_UNIT(c, *up, *vp, up);
            up += 1;
            vp += 1;
        }

        // 残りの桁の繰り上がりを計算し、復帰する。
        if (ep.Borrow(c, u_buf.Region(v_count)))
            throw OverflowException(L"減算によりオーバーフローが発生しました。");
    }

    // 減算の実装。u のワード数は v のワード数以上でなければならない。また、u と v はどちらも 0 であってはならない。
    static void Subtruct_Imp(BasicOperatorEngine& ep, _UBASIC_T u_buf, _UBASIC_T v_buf, _UBASIC_T& w_buf)
    {
        __UNIT_TYPE* up = u_buf.BLOCK;
        __UNIT_TYPE u_count = u_buf.BLOCK_COUNT;
        __UNIT_TYPE* vp = v_buf.BLOCK;
        __UNIT_TYPE v_count = v_buf.BLOCK_COUNT;
        __UNIT_TYPE* wp = w_buf.BLOCK;
        __UNIT_TYPE w_count = w_buf.BLOCK_COUNT;
        __BORROW_T c = 0;

        // まず 32 ワードずつ減算をする。
        __UNIT_TYPE count = v_count >> 5;
        while (count != 0)
        {
            c = _SUBTRUCT_32WORDS_SBB(c, up, vp, wp);
            up += 32;
            vp += 32;
            wp += 32;
            --count;
        }
        // この時点で未処理の桁は 32 ワード未満のはず

        // 未処理の桁が 16 ワード以上あるなら 16 ワード減算を行う。
        if (v_count & 0x10)
        {
            c = _SUBTRUCT_16WORDS_SBB(c, up, vp, wp);
            up += 16;
            vp += 16;
            wp += 16;
        }
        // この時点で未処理の桁は 16 ワード未満のはず

        // 未処理の桁が 8 ワード以上あるなら 8 ワード減算を行う。
        if (v_count & 0x8)
        {
            c = _SUBTRUCT_8WORDS_SBB(c, up, vp, wp);
            up += 8;
            vp += 8;
            wp += 8;
        }
        // この時点で未処理の桁は 8 ワード未満のはず

        // 未処理の桁が 4 ワード以上あるなら 4 ワード減算を行う。
        if (v_count & 0x4)
        {
            c = _SUBTRUCT_4WORDS_SBB(c, up, vp, wp);
            up += 4;
            vp += 4;
            wp += 4;
        }
        // この時点で未処理の桁は 4 ワード未満のはず

        // 未処理の桁が 2 ワード以上あるなら 2 ワード減算を行う。
        if (v_count & 0x2)
        {
            c = _SUBTRUCT_2WORDS_SBB(c, up, vp, wp);
            up += 2;
            vp += 2;
            wp += 2;
        }
        // この時点で未処理の桁は 2 ワード未満のはず

        // 未処理の桁が 1 ワード以上あるなら 1 ワード減算を行う。
        if (v_count & 1)
            c = _SUBTRUCT_UNIT(c, *up++, *vp++, wp++);

        // 残りの桁の繰り上がりを計算し、復帰する。
        if (ep.Borrow(c, u_buf.Region(v_count), w_buf.Region(v_count)))
            throw OverflowException(L"減算によりオーバーフローが発生しました。");
    }

    void BasicOperatorEngine::USubtruct(_UBASIC_T u_buf, _UBASIC_T v_buf)
    {
#ifdef _DEBUG
        if (v_buf.BLOCK_COUNT > 0 && v_buf.BLOCK[v_buf.BLOCK_COUNT - 1] == 0)
            throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_basic_subtruct.cpp;BasicOperatorEngine::USubtruct;1");
#endif
        if (v_buf.BLOCK_COUNT == 0)
        {
            // nop
        }
        else
        {
#ifdef _DEBUG
            if (u_buf.BLOCK_COUNT < v_buf.BLOCK_COUNT)
                throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_basic_subtruct.cpp;BasicOperatorEngine::USubtruct;2");
#endif
            Subtruct_Imp(*this, u_buf, v_buf);
        }
    }

    void BasicOperatorEngine::USubtruct(_UBASIC_T u_buf, __UNIT_TYPE v, _UBASIC_T w_buf)
    {
#ifdef _DEBUG
        if (u_buf.BLOCK_COUNT > 0 && u_buf.BLOCK[u_buf.BLOCK_COUNT - 1] == 0)
            throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_basic_subtruct.cpp;BasicOperatorEngine::USubtruct;1");
#endif
        if (v == 0)
            w_buf.CopyFrom(u_buf);
        else if (u_buf.BLOCK_COUNT < 1)
            throw OverflowException(L"減算によりオーバーフローが発生しました。");
        else
        {
            Subtruct_UX_1W(*this, u_buf, v, w_buf);
        }
    }

    void BasicOperatorEngine::USubtruct(_UBASIC_T u_buf, __UNIT_TYPE v_hi, __UNIT_TYPE v_lo, _UBASIC_T w_buf)
    {
#ifdef _DEBUG
        if (u_buf.BLOCK_COUNT > 0 && u_buf.BLOCK[u_buf.BLOCK_COUNT - 1] == 0)
            throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_basic_subtruct.cpp;BasicOperatorEngine::USubtruct;1");
#endif
        if (v_hi == 0)
            USubtruct(u_buf, v_lo, w_buf);
        else if (u_buf.BLOCK_COUNT < 2)
            throw OverflowException(L"減算によりオーバーフローが発生しました。");
        else
        {
            Subtruct_UX_2W(*this, u_buf, v_hi, v_lo, w_buf);
        }
    }

    void BasicOperatorEngine::USubtruct(__UNIT_TYPE u, _UBASIC_T v_buf, __UNIT_TYPE & w)
    {
#ifdef _DEBUG
        if (v_buf.BLOCK_COUNT > 0 && v_buf.BLOCK[v_buf.BLOCK_COUNT - 1] == 0)
            throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_basic_subtruct.cpp;BasicOperatorEngine::USubtruct;1");
#endif
        if (v_buf.BLOCK_COUNT == 0)
            w = u;
        else if (v_buf.BLOCK_COUNT == 1)
        {
            __BORROW_T b = _SUBTRUCT_UNIT(0, u, v_buf.BLOCK[0], &w);
            if (b)
                throw OverflowException(L"減算によりオーバーフローが発生しました。");
        }
        else
            throw OverflowException(L"減算によりオーバーフローが発生しました。");
    }

    void BasicOperatorEngine::USubtruct(__UNIT_TYPE u_hi, __UNIT_TYPE u_lo, _UBASIC_T v_buf, __UNIT_TYPE & w_hi, __UNIT_TYPE & w_lo)
    {
#ifdef _DEBUG
        if (v_buf.BLOCK_COUNT > 0 && v_buf.BLOCK[v_buf.BLOCK_COUNT - 1] == 0)
            throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_basic_subtruct.cpp;BasicOperatorEngine::USubtruct;1");
#endif
        if (u_hi == 0)
        {
            USubtruct(u_lo, v_buf, w_lo);
            w_hi = 0;
        }
        else if (v_buf.BLOCK_COUNT == 0)
        {
            w_lo = u_lo;
            w_hi = u_hi;
        }
        else if (v_buf.BLOCK_COUNT == 1)
        {
            __BORROW_T b = _SUBTRUCT_UNIT(0, u_lo, v_buf.BLOCK[0], &w_lo);
            b = _SUBTRUCT_UNIT(b, u_hi, 0, &w_hi);
            if (b)
                throw OverflowException(L"減算によりオーバーフローが発生しました。");
        }
        else if (v_buf.BLOCK_COUNT == 2)
        {
            __BORROW_T b = _SUBTRUCT_UNIT(0, u_lo, v_buf.BLOCK[0], &w_lo);
            b = _SUBTRUCT_UNIT(b, u_hi, v_buf.BLOCK[1], &w_hi);
            if (b)
                throw OverflowException(L"減算によりオーバーフローが発生しました。");
        }
        else
            throw OverflowException(L"減算によりオーバーフローが発生しました。");
    }

    void BasicOperatorEngine::USubtruct(_UBASIC_T u_buf, _UBASIC_T v_buf, _UBASIC_T w_buf)
    {
#ifdef _DEBUG
        if (u_buf.BLOCK_COUNT > 0 && u_buf.BLOCK[u_buf.BLOCK_COUNT - 1] == 0)
            throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_basic_subtruct.cpp;BasicOperatorEngine::USubtruct;1");
        if (v_buf.BLOCK_COUNT > 0 && v_buf.BLOCK[v_buf.BLOCK_COUNT - 1] == 0)
            throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_basic_subtruct.cpp;BasicOperatorEngine::USubtruct;2");
#endif
        if (v_buf.BLOCK_COUNT == 0)
            w_buf.CopyFrom(u_buf);
        else if (u_buf.BLOCK_COUNT < v_buf.BLOCK_COUNT)
            throw OverflowException(L"減算によりオーバーフローが発生しました。");
        else
        {
            Subtruct_Imp(*this, u_buf, v_buf, w_buf);
        }
    }

    void BasicOperatorEngine::UNegativeSubtruct(_UBASIC_T u_buf, _UBASIC_T v_buf)
    {
#ifdef _DEBUG
        if (v_buf.BLOCK_COUNT > 0 && v_buf.BLOCK[v_buf.BLOCK_COUNT - 1] == 0)
            throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_basic_subtruct.cpp;BasicOperatorEngine::UNegativeSubtruct;1");
#endif
        _UBASIC_T u_buf2 = u_buf.Shrink();
        if (u_buf2.BLOCK_COUNT == 0)
            u_buf.CopyFrom(v_buf);
        else if (v_buf.BLOCK_COUNT < u_buf2.BLOCK_COUNT)
            throw OverflowException(L"減算によりオーバーフローが発生しました。");
        else
        {
#ifdef _DEBUG
            if (u_buf.BLOCK_COUNT < v_buf.BLOCK_COUNT)
                throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_basic_subtruct.cpp;BasicOperatorEngine::UNegativeSubtruct;2");
#endif
            Subtruct_Imp(*this, v_buf, u_buf2, u_buf);
        }
    }


}


/*
 * END OF FILE
 */