/*
 * The MIT License
 *
 * Copyright 2019 Palmtree Software.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
  * all copies or substantial portions of the Software.
  *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


#pragma once
#ifndef PMC_AUTOGENERATEDINLINEFUNC_H
#define PMC_AUTOGENERATEDINLINEFUNC_H


#include "pmc_internal.h"
#include "pmc_inline_func.h"


namespace Palmtree::Math::Core::Internal
{


__inline static __CARRY_T _ADD_32WORDS_ADC(__CARRY_T c, __UNIT_TYPE* xp, __UNIT_TYPE* yp, __UNIT_TYPE* zp)
{
    c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);
    c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);
    c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);
    c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);
    c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);
    c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);
    c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);
    c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);
    c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);
    c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);
    c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);
    c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);
    c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);
    c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);
    c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);
    c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);
    c = _ADD_UNIT(c, xp[16], yp[16], &zp[16]);
    c = _ADD_UNIT(c, xp[17], yp[17], &zp[17]);
    c = _ADD_UNIT(c, xp[18], yp[18], &zp[18]);
    c = _ADD_UNIT(c, xp[19], yp[19], &zp[19]);
    c = _ADD_UNIT(c, xp[20], yp[20], &zp[20]);
    c = _ADD_UNIT(c, xp[21], yp[21], &zp[21]);
    c = _ADD_UNIT(c, xp[22], yp[22], &zp[22]);
    c = _ADD_UNIT(c, xp[23], yp[23], &zp[23]);
    c = _ADD_UNIT(c, xp[24], yp[24], &zp[24]);
    c = _ADD_UNIT(c, xp[25], yp[25], &zp[25]);
    c = _ADD_UNIT(c, xp[26], yp[26], &zp[26]);
    c = _ADD_UNIT(c, xp[27], yp[27], &zp[27]);
    c = _ADD_UNIT(c, xp[28], yp[28], &zp[28]);
    c = _ADD_UNIT(c, xp[29], yp[29], &zp[29]);
    c = _ADD_UNIT(c, xp[30], yp[30], &zp[30]);
    c = _ADD_UNIT(c, xp[31], yp[31], &zp[31]);
    return (c);
}

__inline static __BORROW_T _SUBTRUCT_32WORDS_SBB(__BORROW_T c, __UNIT_TYPE* xp, __UNIT_TYPE* yp, __UNIT_TYPE* zp)
{
    c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);
    c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);
    c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);
    c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);
    c = _SUBTRUCT_UNIT(c, xp[4], yp[4], &zp[4]);
    c = _SUBTRUCT_UNIT(c, xp[5], yp[5], &zp[5]);
    c = _SUBTRUCT_UNIT(c, xp[6], yp[6], &zp[6]);
    c = _SUBTRUCT_UNIT(c, xp[7], yp[7], &zp[7]);
    c = _SUBTRUCT_UNIT(c, xp[8], yp[8], &zp[8]);
    c = _SUBTRUCT_UNIT(c, xp[9], yp[9], &zp[9]);
    c = _SUBTRUCT_UNIT(c, xp[10], yp[10], &zp[10]);
    c = _SUBTRUCT_UNIT(c, xp[11], yp[11], &zp[11]);
    c = _SUBTRUCT_UNIT(c, xp[12], yp[12], &zp[12]);
    c = _SUBTRUCT_UNIT(c, xp[13], yp[13], &zp[13]);
    c = _SUBTRUCT_UNIT(c, xp[14], yp[14], &zp[14]);
    c = _SUBTRUCT_UNIT(c, xp[15], yp[15], &zp[15]);
    c = _SUBTRUCT_UNIT(c, xp[16], yp[16], &zp[16]);
    c = _SUBTRUCT_UNIT(c, xp[17], yp[17], &zp[17]);
    c = _SUBTRUCT_UNIT(c, xp[18], yp[18], &zp[18]);
    c = _SUBTRUCT_UNIT(c, xp[19], yp[19], &zp[19]);
    c = _SUBTRUCT_UNIT(c, xp[20], yp[20], &zp[20]);
    c = _SUBTRUCT_UNIT(c, xp[21], yp[21], &zp[21]);
    c = _SUBTRUCT_UNIT(c, xp[22], yp[22], &zp[22]);
    c = _SUBTRUCT_UNIT(c, xp[23], yp[23], &zp[23]);
    c = _SUBTRUCT_UNIT(c, xp[24], yp[24], &zp[24]);
    c = _SUBTRUCT_UNIT(c, xp[25], yp[25], &zp[25]);
    c = _SUBTRUCT_UNIT(c, xp[26], yp[26], &zp[26]);
    c = _SUBTRUCT_UNIT(c, xp[27], yp[27], &zp[27]);
    c = _SUBTRUCT_UNIT(c, xp[28], yp[28], &zp[28]);
    c = _SUBTRUCT_UNIT(c, xp[29], yp[29], &zp[29]);
    c = _SUBTRUCT_UNIT(c, xp[30], yp[30], &zp[30]);
    c = _SUBTRUCT_UNIT(c, xp[31], yp[31], &zp[31]);
    return (c);
}

__inline static __CARRY_T _ADD_16WORDS_ADC(__CARRY_T c, __UNIT_TYPE* xp, __UNIT_TYPE* yp, __UNIT_TYPE* zp)
{
    c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);
    c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);
    c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);
    c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);
    c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);
    c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);
    c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);
    c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);
    c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);
    c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);
    c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);
    c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);
    c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);
    c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);
    c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);
    c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);
    return (c);
}

__inline static __BORROW_T _SUBTRUCT_16WORDS_SBB(__BORROW_T c, __UNIT_TYPE* xp, __UNIT_TYPE* yp, __UNIT_TYPE* zp)
{
    c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);
    c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);
    c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);
    c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);
    c = _SUBTRUCT_UNIT(c, xp[4], yp[4], &zp[4]);
    c = _SUBTRUCT_UNIT(c, xp[5], yp[5], &zp[5]);
    c = _SUBTRUCT_UNIT(c, xp[6], yp[6], &zp[6]);
    c = _SUBTRUCT_UNIT(c, xp[7], yp[7], &zp[7]);
    c = _SUBTRUCT_UNIT(c, xp[8], yp[8], &zp[8]);
    c = _SUBTRUCT_UNIT(c, xp[9], yp[9], &zp[9]);
    c = _SUBTRUCT_UNIT(c, xp[10], yp[10], &zp[10]);
    c = _SUBTRUCT_UNIT(c, xp[11], yp[11], &zp[11]);
    c = _SUBTRUCT_UNIT(c, xp[12], yp[12], &zp[12]);
    c = _SUBTRUCT_UNIT(c, xp[13], yp[13], &zp[13]);
    c = _SUBTRUCT_UNIT(c, xp[14], yp[14], &zp[14]);
    c = _SUBTRUCT_UNIT(c, xp[15], yp[15], &zp[15]);
    return (c);
}

__inline static __CARRY_T _ADD_8WORDS_ADC(__CARRY_T c, __UNIT_TYPE* xp, __UNIT_TYPE* yp, __UNIT_TYPE* zp)
{
    c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);
    c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);
    c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);
    c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);
    c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);
    c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);
    c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);
    c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);
    return (c);
}

__inline static __BORROW_T _SUBTRUCT_8WORDS_SBB(__BORROW_T c, __UNIT_TYPE* xp, __UNIT_TYPE* yp, __UNIT_TYPE* zp)
{
    c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);
    c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);
    c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);
    c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);
    c = _SUBTRUCT_UNIT(c, xp[4], yp[4], &zp[4]);
    c = _SUBTRUCT_UNIT(c, xp[5], yp[5], &zp[5]);
    c = _SUBTRUCT_UNIT(c, xp[6], yp[6], &zp[6]);
    c = _SUBTRUCT_UNIT(c, xp[7], yp[7], &zp[7]);
    return (c);
}

__inline static __CARRY_T _ADD_4WORDS_ADC(__CARRY_T c, __UNIT_TYPE* xp, __UNIT_TYPE* yp, __UNIT_TYPE* zp)
{
    c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);
    c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);
    c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);
    c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);
    return (c);
}

__inline static __BORROW_T _SUBTRUCT_4WORDS_SBB(__BORROW_T c, __UNIT_TYPE* xp, __UNIT_TYPE* yp, __UNIT_TYPE* zp)
{
    c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);
    c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);
    c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);
    c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);
    return (c);
}

__inline static __CARRY_T _ADD_2WORDS_ADC(__CARRY_T c, __UNIT_TYPE* xp, __UNIT_TYPE* yp, __UNIT_TYPE* zp)
{
    c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);
    c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);
    return (c);
}

__inline static __BORROW_T _SUBTRUCT_2WORDS_SBB(__BORROW_T c, __UNIT_TYPE* xp, __UNIT_TYPE* yp, __UNIT_TYPE* zp)
{
    c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);
    c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);
    return (c);
}

}


#endif

/*
 * END OF FILE
 */
